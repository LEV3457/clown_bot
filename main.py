import asyncio
import logging
from asyncio
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackContext
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,  
    ContextTypes
)

TOKEN = "
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)



KEYWORD_RESPONSES = {
    "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã",
    "–∫–∞–∫ –¥–µ–ª–∞": "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ —Å–∞–º?",
    "–ø–æ–∫–∞": "–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!",
    "–∫–Ω–æ–ø–∫–∏": "–í–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
}


def get_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–ü—Ä–∏–≤–µ—Ç"), KeyboardButton("–ü–æ–∫–∞")],
            [KeyboardButton("–ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )


def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–Ø –±–æ—Ç-–ø—Ä–∏–º–µ—Ä! –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:",
        reply_markup=get_keyboard()
    )


def help_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/help - –ø–æ–º–æ—â—å\n\n"
        "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: " + ", ".join(KEYWORD_RESPONSES.keys())
    )


def handle_message(update: Update, context: CallbackContext):
    text = update.message.text.lower()
    

    for keyword, response in KEYWORD_RESPONSES.items():
        if keyword in text:
            update.message.reply_text(response)
            return
    
    
    update.message.reply_text(
        "–Ø –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π:\n" + "\n".join([f"- {kw}" for kw in KEYWORD_RESPONSES.keys()]),
        reply_markup=get_keyboard()
    )



def error(update: Update, context: CallbackContext):
    logger.warning(f'Update {update} caused error {context.error}')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# def main():
#     updater = Updater(TOKEN, use_context=True)
#     dp = updater.dispatcher

async def main():
    logger.add("file.log",
            format="{time:YYYY-MM-DD at HH:mm:ss} | {level} | {message}",
            rotation="3 days",
            backtrace=True,
            diagnose=True)

    bot = Bot(TOKEN)
    logger.info("–ë–æ—Ç —Å–æ–∑–¥–∞–Ω")
    dp = Dispatcher()
    logger.info("–î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω")

    
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))

    
    dp.add_handler(MessageHandler(filters.text & ~filters.command, handle_message))

    
    dp.add_error_handler(error)

    
    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.idle()

if __name__ == '__main__':
    asyncio.run(main())
